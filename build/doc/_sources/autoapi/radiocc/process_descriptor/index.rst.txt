:py:mod:`radiocc.process_descriptor`
====================================

.. py:module:: radiocc.process_descriptor

.. autoapi-nested-parse::

   Description of the data to be processed.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   radiocc.process_descriptor.Descriptor
   radiocc.process_descriptor.DescriptorBuilder



Functions
~~~~~~~~~

.. autoapisummary::

   radiocc.process_descriptor.load



Attributes
~~~~~~~~~~

.. autoapisummary::

   radiocc.process_descriptor.DESCRIPTOR_FILE_NAME


.. py:data:: DESCRIPTOR_FILE_NAME
   :annotation: = descriptor.yaml

   

.. py:class:: Descriptor(META_KERNEL: str, RADIO_DATA_TYPE: radiocc.model.RadioDataType)

   Structure representation of the description of the data to be processed.

   .. py:method:: to_dict(self) -> Dict[str, Any]

      Convert config to hashmap.



.. py:class:: DescriptorBuilder

   Builder of the structure representation of the description of the data to be
   processed.

   .. py:attribute:: __META_KERNEL
      :annotation: :str

      

   .. py:attribute:: __RADIO_DATA_TYPE
      :annotation: :radiocc.model.RadioDataType

      

   .. py:method:: meta_kernel(self, META_KERNEL: str) -> DescriptorBuilder

      Set meta kernel folder path.


   .. py:method:: radio_data_type(self, TYPE: radiocc.model.RadioDataType) -> DescriptorBuilder

      Set radio data type.


   .. py:method:: build(self) -> Descriptor

      Build Descriptor.



.. py:function:: load(PATH: pathlib.Path) -> Descriptor

   Load descriptor from a file.


