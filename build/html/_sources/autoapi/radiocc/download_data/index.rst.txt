:py:mod:`radiocc.download_data`
===============================

.. py:module:: radiocc.download_data

.. autoapi-nested-parse::

   Script to download MEX & MAVEN data.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   radiocc.download_data.update_ROSE_query_id
   radiocc.download_data.parse_maven_meta_kernel_name
   radiocc.download_data.fetch_file
   radiocc.download_data.find_kernels_to_load
   radiocc.download_data.download_kernels
   radiocc.download_data.find_ROSE_data_in_bundle
   radiocc.download_data.find_ROSE_data
   radiocc.download_data.get_relative_time
   radiocc.download_data.select_radio_data
   radiocc.download_data.get_csv_url_from_ROSE_data_query
   radiocc.download_data.download_ROSE
   radiocc.download_data.find_spice_file_possibilities
   radiocc.download_data.find_years_rse
   radiocc.download_data.find_months_rse
   radiocc.download_data.select_year
   radiocc.download_data.select_month
   radiocc.download_data.select_meta_kernel
   radiocc.download_data.select_files_by_date_and_version
   radiocc.download_data.proceed



Attributes
~~~~~~~~~~

.. autoapisummary::

   radiocc.download_data.URL_PDS
   radiocc.download_data.PDS_URLPATH_SEARCH
   radiocc.download_data.PDS_URLPATH_DOWNLOAD
   radiocc.download_data.PDS_QUERY
   radiocc.download_data.URL_MAVEN_ROSE_ROOT_SEARCH
   radiocc.download_data.URL_MAVEN_ROSE_ROOT_DOWNLOAD
   radiocc.download_data.TEMPLATE_MAVEN_ROSE_BUNDLE
   radiocc.download_data.MAVEN_ROSE_BUNDLE_DATA_PATHS
   radiocc.download_data.URLS_MAVEN_ROSE_SEARCH
   radiocc.download_data.URL_MAVEN_SPICE
   radiocc.download_data.URLS
   radiocc.download_data.MAVEN_MK_RGX
   radiocc.download_data.MAVEN_MK_RGX_GROUP
   radiocc.download_data.REGEX_TEMPLATE_MAVEN_ROSE_YEARS
   radiocc.download_data.REGEX_TEMPLATE_MAVEN_ROSE_YEAR_GROUP
   radiocc.download_data.REGEX_TEMPLATE_MAVEN_ROSE_MONTHS
   radiocc.download_data.REGEX_TEMPLATE_MAVEN_ROSE_MONTH_GROUP
   radiocc.download_data.REGEX_TEMPLATE_MAVEN_ROSE_DATA
   radiocc.download_data.REGEX_TEMPLATE_MAVEN_ROSE_DATA_GROUP
   radiocc.download_data.MAVEN_RADIO_DATA_RGX
   radiocc.download_data.MAVEN_RADIO_DATA_RGX_TIME_GROUP
   radiocc.download_data.DTPOOL_METHOD
   radiocc.download_data.TIMEOUT
   radiocc.download_data.START_INDEX
   radiocc.download_data.DIRNAME_PATTERN_SLICE


.. py:function:: update_ROSE_query_id(URL: urlpath.URL, CHANGES_ON_QUERY: Callable[[urlpath.URL], urlpath.URL]) -> urlpath.URL

   To update URL.


.. py:data:: URL_PDS
   

   

.. py:data:: PDS_URLPATH_SEARCH
   :annotation: = search/view

   

.. py:data:: PDS_URLPATH_DOWNLOAD
   :annotation: = ditdos/write

   

.. py:data:: PDS_QUERY
   

   

.. py:data:: URL_MAVEN_ROSE_ROOT_SEARCH
   

   

.. py:data:: URL_MAVEN_ROSE_ROOT_DOWNLOAD
   

   

.. py:data:: TEMPLATE_MAVEN_ROSE_BUNDLE
   

   

.. py:data:: MAVEN_ROSE_BUNDLE_DATA_PATHS
   

   

.. py:data:: URLS_MAVEN_ROSE_SEARCH
   

   

.. py:data:: URL_MAVEN_SPICE
   

   

.. py:data:: URLS
   

   

.. py:data:: MAVEN_MK_RGX
   :annotation: = maven_\d{4}_v\d{2}\.tm

   

.. py:data:: MAVEN_MK_RGX_GROUP
   :annotation: = maven_(\d{4})_v(\d{2})\.tm

   

.. py:data:: REGEX_TEMPLATE_MAVEN_ROSE_YEARS
   

   

.. py:data:: REGEX_TEMPLATE_MAVEN_ROSE_YEAR_GROUP
   

   

.. py:data:: REGEX_TEMPLATE_MAVEN_ROSE_MONTHS
   

   

.. py:data:: REGEX_TEMPLATE_MAVEN_ROSE_MONTH_GROUP
   

   

.. py:data:: REGEX_TEMPLATE_MAVEN_ROSE_DATA
   

   

.. py:data:: REGEX_TEMPLATE_MAVEN_ROSE_DATA_GROUP
   

   

.. py:data:: MAVEN_RADIO_DATA_RGX
   

   

.. py:data:: MAVEN_RADIO_DATA_RGX_TIME_GROUP
   

   

.. py:data:: DTPOOL_METHOD
   :annotation: = KERNELS_TO_LOAD

   

.. py:data:: TIMEOUT
   :annotation: = 10.0

   

.. py:data:: START_INDEX
   :annotation: = 0

   

.. py:data:: DIRNAME_PATTERN_SLICE
   

   

.. py:function:: parse_maven_meta_kernel_name(META_KERNEL_NAME: str) -> Optional[Tuple[int, int]]

   Find MAVEN meta kernel year and name from its name.


.. py:function:: fetch_file(URL: urlpath.URL, PATH: pathlib.Path, DESCRIPTION: str = '') -> bool

   Fetch file online at URL and place it at PATH.


.. py:function:: find_kernels_to_load(PATH: pathlib.Path) -> List[str]

   Find the list of kernels to load from a meta kernel.


.. py:function:: download_kernels(META_KERNEL: str) -> None

   Download SPICE kernels.


.. py:function:: find_ROSE_data_in_bundle(URL: urlpath.URL, BUNDLE: str) -> Iterable[str]


.. py:function:: find_ROSE_data(DATE: arrow.Arrow) -> Dict[str, Iterable[str]]

   Download radio-science data from date.

   The date contains year and month information.


.. py:function:: get_relative_time(LEVEL: str, DATA: str) -> Any

   Compute relative time.


.. py:function:: select_radio_data(RADIO_DATA: Dict[str, Iterable[str]]) -> Dict[str, str]

   Select which date to consider for the data.


.. py:function:: get_csv_url_from_ROSE_data_query(QUERY: str) -> Tuple[str, urlpath.URL]


.. py:function:: download_ROSE(DATE: arrow.Arrow) -> Tuple[pathlib.Path, radiocc.model.RadioDataType]

   Download radio-science data from date.

   The date contains year and month information.


.. py:function:: find_spice_file_possibilities() -> Dict[int, Dict[int, str]]

   Find available years for SPICE input data.

   Return hashmap of every versions per year to meta kernels and meta kernels.


.. py:function:: find_years_rse() -> List[int]

   Find available years for RSE input data.


.. py:function:: find_months_rse(YEAR: int) -> List[int]

   Find available months for RSE input data at specific year.


.. py:function:: select_year(YEARS: List[int]) -> int

   Select which date to consider for the data.


.. py:function:: select_month(MONTHS: List[int]) -> int

   Select which date to consider for the data.


.. py:function:: select_meta_kernel(VERSIONS: Dict[int, str]) -> str

   Find a select a kernel version to obtain the meta kernel name.


.. py:function:: select_files_by_date_and_version() -> Tuple[arrow.Arrow, str]

   Select which files to download regarding the configuration.

   Return an Arrow date containing year and month information, and the meta kernel
   file chosen.


.. py:function:: proceed() -> None

   Download input data: SPICE kernels & RSE.


